{"version":3,"sources":["components/ExampleText.js","components/Input.js","components/NotableSpeeds.js","App.js","index.js"],"names":["SkipButton","skip","useSkip","className","onClick","RewindButton","rewind","useRewind","ExampleText","milisecondsPerCharacter","wpm","wpmToMspc","exampleText","getPace","char","href","Input","onChange","type","size","value","maxLength","min","max","NotableSpeeds","notableSpeeds","label","map","speed","App","useState","setWPM","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAYMA,G,MAAa,WACjB,IAAMC,EAAOC,cACb,OACE,wBACEC,UAAU,iDACVC,QAASH,EAFX,SAIG,WAKDI,EAAe,WACnB,IAAMC,EAASC,cACf,OACE,wBACEJ,UAAU,iDACVC,QAASE,EAFX,SAIG,aAyCQE,EApCK,SAAC,GAAa,IAC1BC,EA3BU,SAACC,GAAD,OAAS,KAAQA,EA2BDC,CADD,EAAVD,KAGfE,EAAc,CAClB,wZACA,4UACA,kGACA,wsBAGF,OACE,qBAAKT,UAAU,2BAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,qBAAmCA,UAAU,mBAA7C,SACE,eAAC,IAAD,CAAMU,QAAS,SAACC,GAAD,OAAUL,GAAzB,UACE,8BAAMG,EAAY,KAClB,uBACA,8BAAMA,EAAY,KAClB,uBACA,8BAAMA,EAAY,KAClB,uBACA,8BAAMA,EAAY,KAClB,uBACC,YACD,mBAAGG,KAAK,iDAAR,SACG,8BAZGN,GAgBV,cAAC,EAAD,UChDOO,EAfD,SAAC,GAAuB,IAArBN,EAAoB,EAApBA,IAAKO,EAAe,EAAfA,SACpB,OACE,uBACEd,UAAU,cACVe,KAAK,SACLC,KAAK,IACLC,MAAOV,EACPO,SAAUA,EACVI,UAAU,IACVC,IAAI,IACJC,IAAI,SCeKC,G,MAxBO,SAAC,GAAiB,IAAfpB,EAAc,EAAdA,QASjBqB,EARkB,CACtB,CAAEC,MAAO,yBAA0BhB,IAAK,IACxC,CAAEgB,MAAO,wBAAyBhB,IAAK,IACvC,CAAEgB,MAAO,wCAAyChB,IAAK,IACvD,CAAEgB,MAAO,+BAAgChB,IAAK,KAC9C,CAAEgB,MAAO,8BAA+BhB,IAAK,MAGTiB,KAAI,SAACC,GACzC,OACE,oBACEzB,UAAU,oCACViB,MAAOQ,EAAMlB,IACbN,QAASA,EAHX,mBAMMwB,EAAMF,MANZ,aAMsBE,EAAMlB,MAFrBkB,EAAMlB,QAMjB,OAAO,oBAAIP,UAAU,0BAAd,SAAyCsB,MCSnCI,MAzBf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNpB,EADM,KACDqB,EADC,KAGb,OACE,sBAAK5B,UAAU,WAAf,UACE,yBAAQA,UAAU,GAAlB,UACE,oBAAIA,UAAU,+BAAd,uEAGA,qBAAIA,UAAU,MAAd,sCAC4B,IAC1B,+BACE,cAAC,EAAD,CAAOO,IAAKA,EAAKO,SAAU,SAACe,GAAD,OAAOD,EAAOC,EAAEC,OAAOb,OAAS,SACrD,IAJV,aAQF,0BAASjB,UAAU,gBAAnB,UACE,cAAC,EAAD,CAAeC,QAAS,SAAC4B,GAAD,OAAOD,EAAOC,EAAEC,OAAOb,OAAS,OACxD,cAAC,EAAD,CAAaV,IAAKA,WCvB1BwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5aa62e81.chunk.js","sourcesContent":["import React from \"react\";\nimport { WindupChildren, Pace, useRewind, useSkip } from \"windups\";\nimport \"./ExampleText.css\";\n\n//  Text content used to demo typing speeds\n\n//  Converts from words per minute to miliseconds per character\n//    Based on the fact that in the WPM metric it's assumed that a word is five characters\n//    Had to break out the 'label method' from middle school to do this one.\n//    min/x words * word/ 5 char * 60000 ms/min resulting in 12000 ms/x chars\nconst wpmToMspc = (wpm) => 12000 / wpm;\n\nconst SkipButton = () => {\n  const skip = useSkip();\n  return (\n    <button\n      className=\"button-reset mb2 green bg-navy bn br3 pa2 grow\"\n      onClick={skip}\n    >\n      {\"Skip\"}\n    </button>\n  );\n};\n\nconst RewindButton = () => {\n  const rewind = useRewind();\n  return (\n    <button\n      className=\"button-reset mt2 green bg-navy bn br3 pa2 grow\"\n      onClick={rewind}\n    >\n      {\"Restart\"}\n    </button>\n  );\n};\n\nconst ExampleText = ({ wpm }) => {\n  const milisecondsPerCharacter = wpmToMspc(wpm);\n\n  const exampleText = [\n    'Since the length or duration of words is clearly variable, for the purpose of measurement of text entry, the definition of each \"word\" is often standardized to be five characters or keystrokes long in English, including spaces and punctuation. For example, under such a method applied to plain English text the phrase \"I run\" counts as one word, but \"rhinoceros\" and \"let\\'s talk\" would both count as two.',\n    'Karat et al. found that one study of average computer users in 1999, the average rate for transcription was 32.5 words per minute, and 19.0 words per minute for composition. In the same study, when the group was divided into \"fast\", \"moderate\", and \"slow\" groups, the average speeds were 40 wpm, 35 wpm, and 23 wpm, respectively.',\n    \"With the onset of the era of desktop computers, fast typing skills became much more widespread.\",\n    ' An average professional typist types usually in speeds of 50 to 80 wpm, while some positions can require 80 to 95 (usually the minimum required for dispatch positions and other time-sensitive typing jobs), and some advanced typists work at speeds above 120 wpm. Two-finger typists, sometimes also referred to as \"hunt and peck\" typists, commonly reach sustained speeds of about 37 wpm for memorized text and 27 wpm when copying text, but in bursts may be able to reach much higher speeds. From the 1920s through the 1970s, typing speed (along with shorthand speed) was an important secretarial qualification and typing contests were popular and often publicized by typewriter companies as promotional tools.',\n  ];\n\n  return (\n    <div className=\"example-text pl2 pr2 mr4\">\n      <WindupChildren>\n        <SkipButton />\n        <div key={milisecondsPerCharacter} className=\"bg-white pa2 br3\">\n          <Pace getPace={(char) => milisecondsPerCharacter}>\n            <div>{exampleText[0]}</div>\n            <br />\n            <div>{exampleText[1]}</div>\n            <br />\n            <div>{exampleText[2]}</div>\n            <br />\n            <div>{exampleText[3]}</div>\n            <br />\n            {\"from the \"}\n            <a href=\"https://en.wikipedia.org/wiki/Words_per_minute\">\n              {\"Wikipedia page on WPM\"}\n            </a>\n          </Pace>\n        </div>\n        <RewindButton />\n      </WindupChildren>\n    </div>\n  );\n};\n\nexport default ExampleText;\n","import React from \"react\";\n\n//  Used to set WPM the site is running based on the input text box.\nconst Input = ({ wpm, onChange }) => {\n  return (\n    <input\n      className=\"input-reset\"\n      type=\"number\"\n      size=\"1\"\n      value={wpm}\n      onChange={onChange}\n      maxLength=\"3\"\n      min=\"1\"\n      max=\"999\"\n    ></input>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport \"./NotableSpeeds.css\";\n\n//  Used to set WPM the site is running based on notable/historic examples.\nconst NotableSpeeds = ({ onClick }) => {\n  const labelValuePairs = [\n    { label: \"'Hunt and Peck' typist\", wpm: 27 },\n    { label: \"Average Speed in 1990\", wpm: 32 },\n    { label: \"Low threshold for professional typist\", wpm: 50 },\n    { label: \"Stenotype typists as fast as\", wpm: 226 },\n    { label: \"Guiness world record holder\", wpm: 360 },\n  ];\n\n  const notableSpeeds = labelValuePairs.map((speed) => {\n    return (\n      <li\n        className=\"green bg-navy br3 pa3 tl mt3 grow\"\n        value={speed.wpm}\n        onClick={onClick}\n        key={speed.wpm}\n      >\n        {`${speed.label}: ${speed.wpm}`}\n      </li>\n    );\n  });\n  return <ul className=\"notable-speeds list mr3\">{notableSpeeds}</ul>;\n};\n\nexport default NotableSpeeds;\n","import React, { useState } from \"react\";\n\nimport \"tachyons\";\nimport \"./App.css\";\n\nimport ExampleText from \"./components/ExampleText\";\nimport Input from \"./components/Input\";\nimport NotableSpeeds from \"./components/NotableSpeeds\";\n\nfunction App() {\n  const [wpm, setWPM] = useState(90);\n\n  return (\n    <div className=\"App navy\">\n      <header className=\"\">\n        <h1 className=\"pa5 ma4 green bg-navy br3 tc\">\n          Slow typer? Fast typer? What's it like on the other side?\n        </h1>\n        <h2 className=\"pl5\">\n          What's it like to type at{\" \"}\n          <span>\n            <Input wpm={wpm} onChange={(e) => setWPM(e.target.value || 90)} />\n          </span>{\" \"}\n          WPM?\n        </h2>\n      </header>\n      <section className=\"flex flex-row\">\n        <NotableSpeeds onClick={(e) => setWPM(e.target.value || 90)} />\n        <ExampleText wpm={wpm} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}